{"version":3,"sources":["../../src/utils/getTemplateType.ts"],"names":["cache","WeakMap","getTemplateType","types","t","path","state","libResolver","has","tag","node","localName","file","metadata","isCallExpression","isIdentifier","callee","arguments","length","name","scope","opts","filename","tagPath","get","set","component","isMemberExpression","object","property","stringLiteral"],"mappings":"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","sourcesContent":["import type {\n  CallExpression,\n  Expression,\n  TaggedTemplateExpression,\n} from '@babel/types';\nimport type { NodePath } from '@babel/traverse';\nimport type { State, TemplateExpression, LibResolverFn } from '../types';\nimport { Core } from '../babel';\nimport hasImport from './hasImport';\n\ntype Result =\n  | NonNullable<TemplateExpression['styled']>\n  | 'css'\n  | 'atomic-css'\n  | null;\n\nconst cache = new WeakMap<NodePath<TaggedTemplateExpression>, Result>();\n\nexport default function getTemplateType(\n  { types: t }: Core,\n  path: NodePath<TaggedTemplateExpression>,\n  state: State,\n  libResolver?: LibResolverFn\n): Result {\n  if (!cache.has(path)) {\n    const { tag } = path.node;\n\n    const localName = state.file.metadata.localName || 'styled';\n\n    if (\n      t.isCallExpression(tag) &&\n      t.isIdentifier(tag.callee) &&\n      tag.arguments.length === 1 &&\n      tag.callee.name === localName &&\n      hasImport(\n        t,\n        path.scope,\n        state.file.opts.filename,\n        localName,\n        ['@linaria/react', 'linaria/react'],\n        libResolver\n      )\n    ) {\n      const tagPath = path.get('tag') as NodePath<CallExpression>;\n      cache.set(path, {\n        component: tagPath.get('arguments')[0] as NodePath<Expression>,\n      });\n    } else if (\n      t.isMemberExpression(tag) &&\n      t.isIdentifier(tag.object) &&\n      t.isIdentifier(tag.property) &&\n      tag.object.name === localName &&\n      hasImport(\n        t,\n        path.scope,\n        state.file.opts.filename,\n        localName,\n        ['@linaria/react', 'linaria/react'],\n        libResolver\n      )\n    ) {\n      cache.set(path, {\n        component: { node: t.stringLiteral(tag.property.name) },\n      });\n    } else if (\n      hasImport(\n        t,\n        path.scope,\n        state.file.opts.filename,\n        'css',\n        ['@linaria/core', 'linaria'],\n        libResolver\n      ) &&\n      t.isIdentifier(tag) &&\n      tag.name === 'css'\n    ) {\n      cache.set(path, 'css');\n    } else if (\n      hasImport(\n        t,\n        path.scope,\n        state.file.opts.filename,\n        'css',\n        ['@linaria/atomic'],\n        libResolver\n      ) &&\n      t.isIdentifier(tag) &&\n      tag.name === 'css'\n    ) {\n      cache.set(path, 'atomic-css');\n    } else {\n      cache.set(path, null);\n    }\n  }\n\n  return cache.get(path) ?? null;\n}\n"],"file":"getTemplateType.js"}