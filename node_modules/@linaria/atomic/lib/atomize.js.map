{"version":3,"sources":["../src/atomize.ts"],"names":["atomize","cssText","atomicRules","stylesheet","postcss","parse","walkDecls","decl","parent","line","prop","value","className","push","property","walkAtRules","atRule","slug","name","params","join"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEe,SAASA,OAAT,CAAiBC,OAAjB,EAAkC;AAC/C,QAAMC,WAIH,GAAG,EAJN;;AAMA,QAAMC,UAAU,GAAGC,iBAAQC,KAAR,CAAcJ,OAAd,CAAnB;;AAEAE,EAAAA,UAAU,CAACG,SAAX,CAAsBC,IAAD,IAAU;AAC7B,UAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;;AACA,QAAIA,MAAM,KAAKL,UAAf,EAA2B;AACzB,YAAMM,IAAI,GAAI,GAAEF,IAAI,CAACG,IAAK,KAAIH,IAAI,CAACI,KAAM,GAAzC;AACA,YAAMC,SAAS,GAAI,OAAM,oBAAQH,IAAR,CAAc,EAAvC;AACAP,MAAAA,WAAW,CAACW,IAAZ,CAAiB;AACfC,QAAAA,QAAQ,EAAEP,IAAI,CAACG,IADA;AAEfE,QAAAA,SAFe;AAGfX,QAAAA,OAAO,EAAEQ;AAHM,OAAjB;AAKD;AACF,GAXD,EAT+C,CAqB/C;;AACAN,EAAAA,UAAU,CAACY,WAAX,CAAwBC,MAAD,IAAY;AACjCA,IAAAA,MAAM,CAACV,SAAP,CAAkBC,IAAD,IAAU;AACzB,YAAMU,IAAI,GAAG,oBACX,CAACD,MAAM,CAACE,IAAR,EAAcF,MAAM,CAACG,MAArB,EAA6BZ,IAAI,CAACG,IAAlC,EAAwCH,IAAI,CAACI,KAA7C,EAAoDS,IAApD,CAAyD,GAAzD,CADW,CAAb;AAGA,YAAMR,SAAS,GAAI,OAAMK,IAAK,EAA9B;AACAf,MAAAA,WAAW,CAACW,IAAZ,CAAiB;AACf;AACA;AACA;AACA;AACAC,QAAAA,QAAQ,EAAE,CAACE,MAAM,CAACE,IAAR,EAAcF,MAAM,CAACG,MAArB,EAA6BZ,IAAI,CAACG,IAAlC,EAAwCU,IAAxC,CAA6C,GAA7C,CALK;AAMfR,QAAAA,SANe;AAOfX,QAAAA,OAAO,EAAG,IAAGe,MAAM,CAACE,IAAK,IAAGF,MAAM,CAACG,MAAO,OAAMP,SAAU,MAAKL,IAAI,CAACG,IAAK,KAAIH,IAAI,CAACI,KAAM;AAPzE,OAAjB;AASD,KAdD;AAeD,GAhBD;AAkBA,SAAOT,WAAP;AACD","sourcesContent":["import postcss from 'postcss';\nimport { slugify } from '@linaria/utils';\n\nexport default function atomize(cssText: string) {\n  const atomicRules: {\n    className: string;\n    cssText: string;\n    property: string;\n  }[] = [];\n\n  const stylesheet = postcss.parse(cssText);\n\n  stylesheet.walkDecls((decl) => {\n    const parent = decl.parent;\n    if (parent === stylesheet) {\n      const line = `${decl.prop}: ${decl.value};`;\n      const className = `atm_${slugify(line)}`;\n      atomicRules.push({\n        property: decl.prop,\n        className,\n        cssText: line,\n      });\n    }\n  });\n  // Things like @media rules\n  stylesheet.walkAtRules((atRule) => {\n    atRule.walkDecls((decl) => {\n      const slug = slugify(\n        [atRule.name, atRule.params, decl.prop, decl.value].join(';')\n      );\n      const className = `atm_${slug}`;\n      atomicRules.push({\n        // For @ rules we want the unique property we do merging on to contain\n        // the atrule params, eg. `media only screen and (max-width: 600px)`\n        // But not the value. That way, our hashes will match when the media rule +\n        // the declaration property match, and we can merge atomic media rules\n        property: [atRule.name, atRule.params, decl.prop].join(' '),\n        className,\n        cssText: `@${atRule.name} ${atRule.params} { .${className} { ${decl.prop}: ${decl.value}; } }`,\n      });\n    });\n  });\n\n  return atomicRules;\n}\n"],"file":"atomize.js"}